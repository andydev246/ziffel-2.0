package com.ziffel.runner;

import com.ziffel.generator.GrammarBasedFsmGenerator;
import com.ziffel.generator.WikipediaContentGenerator;
import com.ziffel.generator.FsmLoader;
import com.ziffel.generator.RLPromptGenerator;
import com.ziffel.oracle.OracleLoader;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class AutoGeneratedFsmTest {
    
    private static GrammarBasedFsmGenerator grammarGenerator;
    private static WikipediaContentGenerator wikiGenerator;
    
    @BeforeAll
    public static void setup() {
        grammarGenerator = new GrammarBasedFsmGenerator();
        wikiGenerator = new WikipediaContentGenerator();
    }
    
    @Test
    public void testGrammarBasedFsmGeneration() throws Exception {
        System.out.println("=== Testing Grammar-Based FSM Generation ===");
        
        // Configure FSM generation
        GrammarBasedFsmGenerator.FsmGenerationConfig config = new GrammarBasedFsmGenerator.FsmGenerationConfig();
        config.maxStates = 4;
        config.maxTransitionsPerState = 2;
        config.conversationEndProbability = 0.4;
        
        // Add custom topics
        config.topics.add("technical");
        config.topics.add("business");
        config.topicIntents.put("technical", "technical.support");
        config.topicIntents.put("business", "business.inquiry");
        
        // Generate FSM
        String fsmJson = grammarGenerator.generateFsmJson(config);
        System.out.println("Generated FSM:");
        System.out.println(fsmJson);
        
        // Save to file
        grammarGenerator.saveFsmToFile(fsmJson, "src/test/resources/fsm/generated-grammar-fsm.json");
        
        // Test the generated FSM
        FsmLoader.FsmDefinition fsm = FsmLoader.loadFromFile("fsm/generated-grammar-fsm.json");
        List<List<RLPromptGenerator.PromptTestCase>> conversations = 
            RLPromptGenerator.generateConversationPaths(fsm, fsm.startState);
        
        System.out.println("\nGenerated " + conversations.size() + " conversation paths");
        for (int i = 0; i < Math.min(3, conversations.size()); i++) {
            System.out.println("Conversation " + (i + 1) + ":");
            for (RLPromptGenerator.PromptTestCase testCase : conversations.get(i)) {
                System.out.println("  - " + testCase.getPrompt() + " (Intent: " + testCase.getIntent() + ")");
            }
        }
    }
    
    @Test
    public void testWikipediaBasedFsmGeneration() throws Exception {
        System.out.println("\n=== Testing Wikipedia-Based FSM Generation ===");
        
        // Configure domain
        WikipediaContentGenerator.DomainConfig config = new WikipediaContentGenerator.DomainConfig("technology");
        config.seedTopics.addAll(List.of("artificial intelligence", "machine learning", "blockchain"));
        config.questionTypes.addAll(List.of("what", "how", "why"));
        config.intentMappings.put("what", "definition.request");
        config.intentMappings.put("how", "process.request");
        config.intentMappings.put("why", "reason.request");
        
        // Search Wikipedia for topics using seed topics
        List<WikipediaContentGenerator.WikiTopic> topics = new ArrayList<>();
        for (String seedTopic : config.seedTopics) {
            List<WikipediaContentGenerator.WikiTopic> topicResults = 
                wikiGenerator.searchAndExtractTopics(seedTopic, 1);
            if (!topicResults.isEmpty()) {
                topics.add(topicResults.get(0));
            }
        }
        
        System.out.println("Found " + topics.size() + " Wikipedia topics:");
        for (WikipediaContentGenerator.WikiTopic topic : topics) {
            System.out.println("  - " + topic.title);
            System.out.println("    Summary: " + topic.summary.substring(0, Math.min(100, topic.summary.length())) + "...");
            System.out.println("    Related: " + topic.relatedTopics);
        }
        
        // Generate FSM from Wikipedia content
        String fsmJson = wikiGenerator.generateDomainSpecificFsm(topics, config);
        System.out.println("\nGenerated FSM from Wikipedia:");
        System.out.println(fsmJson);
        
        // Save FSM to file
        java.nio.file.Files.write(
            java.nio.file.Paths.get("src/test/resources/fsm/generated-wiki-fsm.json"), 
            fsmJson.getBytes()
        );
        
        // Generate oracle from Wikipedia content
        Map<String, Object> oracle = wikiGenerator.generateOracleFromTopics(topics, config);
        System.out.println("\nGenerated Oracle:");
        System.out.println(oracle);
        
        // Save oracle to file
        wikiGenerator.saveOracleToFile(oracle, "src/test/resources/oracle/generated-wiki-oracle.json");
    }
    
    @Test
    public void testHybridGeneration() throws Exception {
        System.out.println("\n=== Testing Hybrid Generation (Grammar + Wikipedia) ===");
        
        // Get Wikipedia topics for domain-specific content
        WikipediaContentGenerator.DomainConfig wikiConfig = new WikipediaContentGenerator.DomainConfig("software");
        wikiConfig.seedTopics.addAll(List.of("software testing", "quality assurance", "automation"));
        wikiConfig.questionTypes.addAll(List.of("what", "how"));
        wikiConfig.intentMappings.put("what", "definition.request");
        wikiConfig.intentMappings.put("how", "process.request");
        
        // Search Wikipedia for topics using seed topics (like in testWikipediaBasedFsmGeneration)
        List<WikipediaContentGenerator.WikiTopic> topics = new ArrayList<>();
        for (String seedTopic : wikiConfig.seedTopics) {
            List<WikipediaContentGenerator.WikiTopic> topicResults = 
                wikiGenerator.searchAndExtractTopics(seedTopic, 1);
            if (!topicResults.isEmpty()) {
                topics.add(topicResults.get(0));
            }
        }
        
        System.out.println("Found " + topics.size() + " Wikipedia topics for hybrid generation:");
        for (WikipediaContentGenerator.WikiTopic topic : topics) {
            System.out.println("  - " + topic.title);
            System.out.println("    Summary: " + topic.summary.substring(0, Math.min(100, topic.summary.length())) + "...");
        }
        
        // Generate hybrid FSM using Wikipedia content (not grammar)
        String hybridFsmJson = wikiGenerator.generateDomainSpecificFsm(topics, wikiConfig);
        System.out.println("\nGenerated Hybrid FSM:");
        System.out.println(hybridFsmJson);
        
        // Save hybrid FSM
        java.nio.file.Files.write(
            java.nio.file.Paths.get("src/test/resources/fsm/generated-hybrid-fsm.json"), 
            hybridFsmJson.getBytes()
        );
        
        // Generate hybrid oracle
        Map<String, Object> hybridOracle = wikiGenerator.generateOracleFromTopics(topics, wikiConfig);
        System.out.println("\nGenerated Hybrid Oracle:");
        System.out.println(hybridOracle);
        
        // Save hybrid oracle
        wikiGenerator.saveOracleToFile(hybridOracle, "src/test/resources/oracle/generated-hybrid-oracle.json");
    }
    
    @Test
    public void testGeneratedFsmExecution() throws Exception {
        System.out.println("\n=== Testing Generated FSM Execution ===");
        
        // Load generated FSM and oracle
        FsmLoader.FsmDefinition fsm = FsmLoader.loadFromFile("fsm/generated-hybrid-fsm.json");
        Map<String, OracleLoader.OracleRule> oracle = OracleLoader.loadFromFile("oracle/generated-hybrid-oracle.json");
        
        // Generate conversation paths
        List<List<RLPromptGenerator.PromptTestCase>> conversations = 
            RLPromptGenerator.generateConversationPaths(fsm, fsm.startState);
        
        System.out.println("Testing " + conversations.size() + " generated conversation paths");
        
//        for (int i = 0; i < Math.min(2, conversations.size()); i++) {
        for (int i = 0; i < conversations.size(); i++) {
            System.out.println("\nConversation Path " + (i + 1) + ":");
            List<RLPromptGenerator.PromptTestCase> conversation = conversations.get(i);
            
            for (RLPromptGenerator.PromptTestCase testCase : conversation) {
                System.out.println("  User: " + testCase.getPrompt());
                System.out.println("  Intent: " + testCase.getIntent());
                
                // Check if we have oracle rules for this intent
                OracleLoader.OracleRule rule = oracle.get(testCase.getIntent());
                if (rule != null) {
                    System.out.println("  Expected: " + rule.getExpectedContains());
                } else {
                    System.out.println("  Expected: No oracle rule found");
                }
                System.out.println();
            }
        }
    }
} 